// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/disreg": {
            "delete": {
                "description": "Удаляет запись пользователя из БД по GUID из JWT",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Удалить данные пользователя",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT токен",
                        "name": "jwt",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Пользователь удалён"
                    },
                    "400": {
                        "description": "необходим JWT",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "неверный JWT",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/getguid": {
            "get": {
                "description": "Извлекает GUID из валидного JWT токена (проверяет его наличие в БД)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Получить GUID пользователя",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT токен",
                        "name": "jwt",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "необходим JWT",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "неверный JWT или пользователь не существует",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/gettoken": {
            "get": {
                "description": "Генерирует access и refresh токены для нового пользователя (guid создается для нового пользователя)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Получить пару токенов",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "необходим User-Agent",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/refreshtoken": {
            "post": {
                "description": "Генерирует новые access и refresh токены для существующего пользователя. Требует валидные JWT и refresh token из заголовков.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Обновить пару токенов",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Текущий JWT токен",
                        "name": "jwt",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Текущий refresh token",
                        "name": "refresh_token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Возвращает новую пару токенов",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Необходимы JWT и refresh_token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Неверный токен/refresh_token или изменён User-Agent",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
